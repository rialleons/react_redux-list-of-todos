{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","utils/api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/getVisibleTodos.ts","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialFilterState","global","All","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","dispatch","shownTodo","isShown","id","className","classNames","completed","title","onClick","currentTodoActions","TodoList","map","TodoFilter","value","onChange","event","target","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","shownUser","setShownUser","useEffect","userId","finally","href","email","name","App","response","todosActions","visibleTodos","allTodos","visibleFilter","shownTodos","Error","lowerQuery","toLowerCase","includes","getVisibleTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4184ae5e.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET',\n  payload: Todo,\n};\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return { ...action.payload };\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Filter } from '../types/Filter';\nimport { Status } from '../types/Status';\n\ntype ChangeGlobalAction = {\n  type: 'filter/CHANGE_GLOBAL',\n  payload: Status,\n};\n\ntype ChangeQueryAction = {\n  type: 'filter/CHANGE_QUERY',\n  payload: string,\n};\n\ntype ClearQueryAction = {\n  type: 'filter/CLEAR_QUERY',\n};\n\nconst changeGlobal = (status: Status): ChangeGlobalAction => ({\n  type: 'filter/CHANGE_GLOBAL',\n  payload: status,\n});\n\nconst changeQuery = (query: string): ChangeQueryAction => ({\n  type: 'filter/CHANGE_QUERY',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'filter/CLEAR_QUERY',\n});\n\nexport const actions = { changeGlobal, changeQuery, clearQuery };\n\ntype Action = ChangeGlobalAction | ChangeQueryAction | ClearQueryAction;\n\nconst initialFilterState: Filter = {\n  global: Status.All,\n  query: '',\n};\n\nconst filterReducer = (\n  state: Filter = initialFilterState,\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/CHANGE_GLOBAL':\n      return {\n        ...state,\n        global: action.payload,\n      };\n\n    case 'filter/CHANGE_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/CLEAR_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const shownTodo = useAppSelector(state => state.currentTodo);\n\n  const isShown = shownTodo?.id === todo.id;\n\n  const handleShowButton = () => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isShown,\n      })}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span\n            className=\"icon\"\n            data-cy=\"iconCompleted\"\n          >\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={todo.completed\n            ? 'has-text-success'\n            : 'has-text-danger'}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleShowButton}\n        >\n          <span className=\"icon\">\n            <i className={`far ${isShown\n              ? 'fa-eye-slash'\n              : 'fa-eye'}`}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\n\nimport { Status } from '../../types/Status';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n\n  const handleGlobalFilterChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(actions.changeGlobal(event.target.value as Status));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.changeQuery(event.target.value));\n  };\n\n  const handleClearSearch = () => {\n    dispatch(actions.clearQuery());\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.global}\n            onChange={handleGlobalFilterChange}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst BASE_URL = (\n  'https://mate-academy.github.io/react_dynamic-list-of-todos/api'\n);\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL + url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from '../Loader';\nimport { getUser } from '../../utils/api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const shownTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [shownUser, setShownUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (shownTodo) {\n      setIsLoading(true);\n\n      getUser(shownTodo.userId)\n        .then(setShownUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, [shownTodo]);\n\n  const handleRemoveButton = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${shownTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleRemoveButton}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {shownTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {shownTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={shownUser?.email}>\n                {shownUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './utils/api';\nimport { getVisibleTodos } from './utils/getVisibleTodos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const shownTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((response) => dispatch(todosActions.setTodos(response)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = getVisibleTodos(todos, filter);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n              <TodoList todos={visibleTodos} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {shownTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import { Filter } from '../types/Filter';\nimport { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (allTodos: Todo[], visibleFilter: Filter) => {\n  let shownTodos: Todo[] = [];\n\n  switch (visibleFilter.global) {\n    case Status.All:\n      shownTodos = [...allTodos];\n      break;\n\n    case Status.Active:\n      shownTodos = allTodos.filter(todo => !todo.completed);\n      break;\n\n    case Status.Completed:\n      shownTodos = allTodos.filter(todo => todo.completed);\n      break;\n\n    default:\n      throw new Error('Unknown filter!');\n  }\n\n  if (visibleFilter.query) {\n    const lowerQuery = visibleFilter.query.toLowerCase();\n\n    shownTodos = shownTodos.filter(todo => {\n      const lowerTitle = todo.title.toLowerCase();\n\n      return lowerTitle.includes(lowerQuery);\n    });\n  }\n\n  return shownTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}